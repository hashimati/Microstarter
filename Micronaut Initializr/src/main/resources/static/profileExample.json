{ "_id" : "service", "skeleton" : { "gradle" : { "/build___gradle" : "mainClassName = \"@defaultPackage@.Application\"", "/Dockerfile" : "FROM adoptopenjdk/openjdk11-openj9:jdk-11.0.1.13-alpine-slim\nCOPY build/libs/*.jar @app.name@.jar\nEXPOSE 8080\nCMD java  -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dcom.sun.management.jmxremote -noverify ${JAVA_OPTS} -jar @app.name@.jar" }, "cli" : {  }, "src" : { "/src\main\resources\application___yml" : "micronaut:\n    application:\n        name: @app.name@" }, "maven" : { "/Dockerfile" : "FROM adoptopenjdk/openjdk11-openj9:jdk-11.0.1.13-alpine-slim\nCOPY target/@app.name@*.jar @app.name@.jar\nEXPOSE 8080\nCMD java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dcom.sun.management.jmxremote -noverify ${JAVA_OPTS} -jar @app.name@.jar", "/pom___xml" : "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <properties>\n    <exec.mainClass>@defaultPackage@.Application</exec.mainClass>\n  </properties>\n</project>" } },



  "templates" :
    { "java" :
      { "WebsocketClient___java" : "${packageName ? 'package ' + packageName + ';' : ''}\n\nimport io.micronaut.websocket.WebSocketSession;\nimport io.micronaut.websocket.annotation.*;\n\n@ClientWebSocket(\"/${propertyName}/{topic}/\")\npublic abstract class ${className} implements AutoCloseable {\n\n    private WebSocketSession session;\n\n    @OnOpen\n    public void onOpen(WebSocketSession session) {\n        this.session = session;\n    }\n\n    @OnMessage\n    public void onMessage() {}\n\n    public WebSocketSession getSession() {\n        return session;\n    }\n}", "WebsocketServer___java" : "${packageName ? 'package ' + packageName + ';' : ''}\n\nimport io.micronaut.websocket.WebSocketBroadcaster;\nimport io.micronaut.websocket.WebSocketSession;\nimport io.micronaut.websocket.annotation.*;\n\n@ServerWebSocket(\"/${propertyName}/{topic}\")\npublic class ${className} {\n    private WebSocketBroadcaster broadcaster;\n\n    public ${className}(WebSocketBroadcaster broadcaster) {\n        this.broadcaster = broadcaster;\n    }\n\n    @OnOpen\n    public void onOpen() {}\n\n    @OnMessage\n    public void onMessage() {}\n\n    @OnClose\n    public void onClose() {}\n\n}", "Controller___java" : "${packageName ? 'package ' + packageName + ';' : ''}\n\nimport io.micronaut.http.annotation.Controller;\nimport io.micronaut.http.annotation.Get;\nimport io.micronaut.http.HttpStatus;\n\n@Controller(\"/${propertyName}\")\npublic class ${className} {\n\n    @Get(\"/\")\n    public HttpStatus index() {\n        return HttpStatus.OK;\n    }\n}", "ControllerTest___java" : "${packageName ? 'package ' + packageName + ';' : ''}\n\nimport io.micronaut.context.ApplicationContext;\nimport io.micronaut.http.HttpStatus;\nimport io.micronaut.http.client.RxHttpClient;\nimport io.micronaut.runtime.server.EmbeddedServer;\nimport io.micronaut.test.annotation.MicronautTest;\n\nimport org.junit.jupiter.api.Test;\n\nimport javax.inject.Inject;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n@MicronautTest\npublic class ${className}Test {\n\n    @Inject\n    EmbeddedServer embeddedServer;\n\n    @Test\n    public void testIndex() throws Exception {\n        try(RxHttpClient client = embeddedServer.getApplicationContext().createBean(RxHttpClient.class, embeddedServer.getURL())) {\n            assertEquals(HttpStatus.OK, client.toBlocking().exchange(\"/${propertyName}\").status());\n        }\n    }\n}", "Client___java" : "${packageName ? 'package ' + packageName + ';' : ''}\n\nimport io.micronaut.http.client.annotation.Client;\nimport io.micronaut.http.annotation.Get;\nimport io.micronaut.http.HttpStatus;\n\n@Client(\"${propertyName}\")\npublic interface ${className} {\n\n    @Get(\"/\")\n    public HttpStatus index();\n}" }, "groovy" : { "Client___groovy" : "${packageName ? 'package ' + packageName : '' }\n\nimport io.micronaut.http.client.annotation.Client\nimport io.micronaut.http.annotation.Get\nimport io.micronaut.http.HttpStatus\n\n@Client(\"${propertyName}\")\ninterface ${className} {\n\n    @Get(\"/\")\n    HttpStatus index()\n}", "ControllerSpec___groovy" : "${packageName ? 'package ' + packageName : ''}\n\nimport io.micronaut.runtime.server.EmbeddedServer\nimport io.micronaut.test.annotation.MicronautTest\nimport io.micronaut.http.client.RxHttpClient\nimport io.micronaut.http.HttpResponse\nimport io.micronaut.http.HttpStatus\nimport spock.lang.AutoCleanup\nimport spock.lang.Shared\nimport spock.lang.Specification\n\nimport javax.inject.Inject\n\n\n@MicronautTest\nclass ${className}Spec extends Specification {\n\n    @Inject\n    EmbeddedServer embeddedServer\n\n    @Shared @AutoCleanup\n    RxHttpClient client\n\n    void setup() {\n        client = embeddedServer.applicationContext.createBean(RxHttpClient, embeddedServer.getURL())\n    }\n\n\n    void \"test index\"() {\n        given:\n        HttpResponse response = client.toBlocking().exchange(\"/${propertyName}\")\n\n        expect:\n        response.status == HttpStatus.OK\n    }\n}", "WebsocketServer___groovy" : "${packageName ? 'package ' + packageName : '' }\n\nimport io.micronaut.websocket.WebSocketBroadcaster\nimport io.micronaut.websocket.annotation.OnClose\nimport io.micronaut.websocket.annotation.OnMessage\nimport io.micronaut.websocket.annotation.OnOpen\nimport io.micronaut.websocket.annotation.ServerWebSocket\n\n@ServerWebSocket(\"/${propertyName}/{topic}\")\nclass ${className} {\n\n    private WebSocketBroadcaster broadcaster\n\n    ${className}(WebSocketBroadcaster broadcaster) {\n        this.broadcaster = broadcaster\n    }\n\n    @OnOpen\n    void onOpen() {}\n\n    @OnMessage\n    void onMessage() {}\n\n    @OnClose\n    void onClose() {}\n}", "Controller___groovy" : "${packageName ? 'package ' + packageName : '' }\n\nimport io.micronaut.http.annotation.Controller\nimport io.micronaut.http.annotation.Get\nimport io.micronaut.http.HttpStatus\n\n\n@Controller(\"/${propertyName}\")\nclass ${className} {\n\n    @Get(\"/\")\n    HttpStatus index() {\n        return HttpStatus.OK\n    }\n}", "WebsocketClient___groovy" : "${packageName ? 'package ' + packageName : '' }\n\nimport io.micronaut.websocket.WebSocketSession\nimport io.micronaut.websocket.annotation.*\n\n@ClientWebSocket(\"/${propertyName}/{topic}/\")\nabstract class ${className} implements AutoCloseable {\n\n    private WebSocketSession session\n\n    @OnOpen\n    void onOpen(WebSocketSession session) {\n        this.session = session\n    }\n\n    @OnMessage\n    void onMessage() {}\n\n}" }, "kotlin" : { "WebsocketClient___kt" : "${packageName ? 'package ' + packageName : '' }\n\nimport io.micronaut.websocket.WebSocketSession\nimport io.micronaut.websocket.annotation.*\n\n@ClientWebSocket(\"/${propertyName}/{topic}/\")\nabstract class ${className} : AutoCloseable {\n\n    var session: WebSocketSession? = null\n        private set\n\n    @OnOpen\n    fun onOpen(session: WebSocketSession) {\n        this.session = session\n    }\n\n    @OnMessage\n    fun onMessage() {\n    }\n}", "Client___kt" : "${packageName ? 'package ' + packageName : '' }\n\nimport io.micronaut.http.client.annotation.Client\nimport io.micronaut.http.annotation.Get\nimport io.micronaut.http.HttpStatus\n\n@Client(\"${propertyName}\")\ninterface ${className} {\n\n    @Get(\"/\")\n    fun index(): HttpStatus\n}", "Controller___kt" : "${packageName ? 'package ' + packageName : '' }\n\nimport io.micronaut.http.annotation.Controller\nimport io.micronaut.http.annotation.Get\nimport io.micronaut.http.HttpStatus\n\n@Controller(\"/${propertyName}\")\nclass ${className} {\n\n    @Get(\"/\")\n    fun index(): HttpStatus {\n        return HttpStatus.OK\n    }\n}", "WebsocketServer___kt" : "${packageName ? 'package ' + packageName : '' }\n\nimport io.micronaut.websocket.WebSocketBroadcaster\nimport io.micronaut.websocket.WebSocketSession\nimport io.micronaut.websocket.annotation.*\n\n@ServerWebSocket(\"/${propertyName}/{topic}\")\nclass ${className}(private val broadcaster: WebSocketBroadcaster) {\n\n    @OnOpen\n    fun onOpen() {\n    }\n\n    @OnMessage\n    fun onMessage() {\n    }\n\n    @OnClose\n    fun onClose() {\n    }\n\n}", "ControllerTest___kt" : "${packageName ? 'package ' + packageName : '' }\n\nimport io.micronaut.context.ApplicationContext\nimport io.micronaut.runtime.server.EmbeddedServer\nimport org.jetbrains.spek.api.Spek\nimport org.jetbrains.spek.api.dsl.describe\nimport org.jetbrains.spek.api.dsl.it\nimport org.junit.jupiter.api.Assertions.assertEquals\n\nclass ${className}Test : Spek({\n\n    describe(\"/${propertyName}\") {\n        //TODO:\n    }\n})" } }, "rootFiles" : { "/build___gradle" : "dependencies {\n    runtime project(':base')\n}", "/profile___yml" : "description: The service profile\nfeatures:\n    oneOf:\n        languages:\n            - feature: groovy\n              priority: 0\n            - feature: kotlin\n              priority: 1\n            - feature: java\n              priority: 2\n        jdbc:\n            - feature: jdbc-hikari\n              priority: 0\n            - feature: jdbc-tomcat\n              priority: 1\n            - feature: jdbc-dbcp\n              priority: 2\n    required:\n        - annotation-api\n        - http-server\n        - http-client\nskeleton:\n    executable: [\"**/gradlew*\", \"**/mnw*\", \"**/mvnw*\", \"**/*.sh\"]\njvmArgs:\n    - -noverify\n    - -XX:TieredStopAtLevel=1\n    - -Dcom.sun.management.jmxremote" }, "_class" : "io.hashimiat.microboot.initializr.entity.micronaut.MicronautProfile" }